agent any
	stages{
		stage("Git Checkout"){
	steps{
git branch: 'main', credentialsId: 'git-creds', url:
'https://github.com/javahometech/doctor-online'
		}
		}
		stage("Maven Build"){
		

		steps{
		sh "mvn clean package"
			}
				}
			
			stage("Dev Deploy"){
steps{
sshPublisher(publishers: [sshPublisherDesc(configName: 'tomcat-dev', transfers:
[sshTransfer(cleanRemote: false, excludes: '', execCommand: '''/opt/tomcat9/bin/shutdown.sh
/opt/tomcat9/bin/startup.sh''', execTimeout: 120000, flatten: false, makeEmptyDirs: false,
noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: 'webapps',
remoteDirectorySDF: false, removePrefix: 'target', sourceFiles: 'target/doctor-online.war')],
		
		usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
			}
			
			}
	

				}
				}
				Pipeline code with ssh agent
			pipeline{
		agent any
stages{
stage("Git Checkout"){
steps{
git branch: 'main', credentialsId: 'git-creds', url:
'https://github.com/javahometech/doctor-online'
}
}
stage("Maven Build"){
steps{
				sh "mvn clean package"
}
}
stage("Dev Deploy"){
steps{
sshagent(['tomcat-dev']) {
				// COPY WAR FILE TO TOMCAT
sh "scp -o StrictHostKeyChecking=no target/doctor-online.war
ec2-user@172.31.13.20:/opt/tomcat9/webapps"
				// Stop tomcat
sh "ssh ec2-user@172.31.13.20 /opt/tomcat9/bin/shutdown.sh"
				// start tomcat
sh "ssh ec2-user@172.31.13.20 /opt/tomcat9/bin/startup.sh"
						}
					}
				}
					}
				}

